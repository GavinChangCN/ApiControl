##<link type="text/css" rel="stylesheet"
##      href="$!{configConstant.resourcesBasicUrl}/css/lib/bootstrap.min.css?v=${configConstant.srcVersion}"/>
<title>API列表 | #if($title) $!title #else 销帮帮 #end</title>
<link rel="stylesheet" href="/css/fuzzy_search.css"/>
<div id="vmList">
    <!-- loading -->
    <div class="modal fade" id="loading" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         data-backdrop='static'>
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="myModalLabel">提示</h4>
                </div>
                <div class="modal-body">
                    请稍候...
                </div>
            </div>
        </div>
    </div>
    <div class="row-fluid">
        <div class="span12">
            <!-- BEGIN STYLE CUSTOMIZER -->
            <!-- END BEGIN STYLE CUSTOMIZER -->
            <h3 class="page-title">
                Api列表
                <small>销帮帮API</small>
            </h3>
            <ul class="breadcrumb">
                <li>
                    <i class="icon-home"></i>
                    <a href="/list.html">销帮帮</a>
                    <span class="icon-angle-right"></span>
                </li>
                <li><a href="#">Api列表</a></li>
            </ul>
        </div>
    </div>
    <div class="row-fluid">
        <div class="span12 search-group">
            <div class="control-group search-small">
                <label class="control-label">模块</label>
                <div class="controls">
                    <select class="m-wrap small" v-model="module" @change="fuzzySearch">
                        <template v-for="(item, index) in moduleArray">
                            <option v-if="index === 0" selected :value="item.key">{{ item.value }}
                            </option>
                            <option v-else :value="item.key">{{ item.value }}
                            </option>
                        </template>
                    </select>
                </div>
            </div>
            <div class="control-group search-small">
                <label class="control-label">版本</label>
                <div class="controls">
                    <select class="m-wrap small" v-model="version" @change="fuzzySearch">
                        <template v-for="(item, index) in versionArray">
                            <option v-if="index === 0" selected :value="item.key">{{ item.value }}
                            </option>
                            <option v-else :value="item.key">{{ item.value }}
                            </option>
                        </template>
                    </select>
                </div>
            </div>
            <div class="control-group search-big">
                <label class="control-label">Api名</label>
                <div class="controls">
                    <input type="text" class="m-wrap medium" placeholder="Api名称" v-model="apiNameLike" @keyup.enter="fuzzySearch">
                </div>

            </div>
            <div class="control-group search-big">
                <label class="control-label">URL</label>
                <div class="controls">
                    <input type="text" class="m-wrap medium" placeholder="地址" v-model="urlLike" @keyup.enter="fuzzySearch">
                </div>
            </div>
            <div class="control-group search-big">
                <label class="control-label">作者</label>
                <div class="controls">
                    <input type="text" class="m-wrap medium" placeholder="作者" v-model="authorNameLike" @keyup.enter="fuzzySearch">
                </div>
            </div>
            <div class="control-group search-btn" style="margin-top: 26px;">
                <button class="btn blue" type="button" @click="fuzzySearch">
                    <i class="icon-search"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="row-fluid">
        <div class="span12">
            <!-- BEGIN SAMPLE FORM PORTLET-->
            <div class="portlet box blue tabbable">
                <div class="portlet-title">
                    <div class="caption">
                        <i class="icon-reorder"></i>
                        <span class="hidden-480">列表</span>
                    </div>
                </div>
                <div class="portlet-body form">
                    <div class="tabbable portlet-tabs">
                        <table class="table table-hover">
                            <thead>
                            <tr>
                                <th @click="moduleSortClick()">模块
                                    <span v-if="moduleSort == 'ASC'" class="caret-wrapper ascending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else-if="moduleSort == 'DESC'" class="caret-wrapper descending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else class="caret-wrapper">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                </th>
                                <th @click="versionSortClick()">版本
                                    <span v-if="versionSort == 'ASC'" class="caret-wrapper ascending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else-if="versionSort == 'DESC'" class="caret-wrapper descending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else class="caret-wrapper">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                </th>
                                <th>Api名</th>
                                <th>URL</th>
                                <th @click="authorSortClick()">作者
                                    <span v-if="authorSort == 'ASC'" class="caret-wrapper ascending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else-if="authorSort == 'DESC'" class="caret-wrapper descending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else class="caret-wrapper">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                </th>
                                <th @click="updateTimeSortClick()">修改时间
                                    <span v-if="updateTimeSort == 'ASC'" class="caret-wrapper ascending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else-if="updateTimeSort == 'DESC'" class="caret-wrapper descending">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                    <span v-else class="caret-wrapper">
                                        <i class="sort-caret ascending"></i>
                                        <i class="sort-caret descending"></i>
                                    </span>
                                </th>
                                <th>操作</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr v-for="(item, index) in list">
                                <td>
                                    {{ item.module }}
                                </td>
                                <td>
                                    v{{ item.version }}
                                </td>
                                <td>
                                    <a href="#" @click="intoDetail(item.id)">{{ item.name }}</a>
                                </td>
                                <td>
                                    {{ item.url }}
                                </td>
                                <td>
                                    {{ item.username }}
                                </td>
                                <td>
                                    {{ formatTime(item.updateTime) }}
                                </td>
                                <td>
                                    <button class="btn red" type="button" @click="showDeleteDialog(item.id)">
                                        <i class="icon-remove" style="margin-right: 10px;"></i>删除
                                    </button>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                        <div class="pagination" style="margin-right: 10px; margin-bottom: 5px;">
                            <div style="text-align: left; float: left;">
                                <button class="btn blue" type="button" style="margin-left: 10px;margin-bottom: 10px;"
                                        @click="addApiDoc()">
                                    <i class="icon-edit" style="margin-right: 10px;"></i>新建接口
                                </button>
                                <button class="btn green" type="button" style="margin-left: 10px;margin-bottom: 10px;"
                                        @click="exportExcel()">
                                    <i class="icon-download" style="margin-right: 10px;"></i>导出excel
                                </button>
                            </div>
                            <div style="text-align: right; float: right;">
                                <ul>
                                    <li v-if="page !== 1"><a href="#" @click="intoPage((page-1))">Prev</a></li>
                                    <li class="disabled" v-if="showFirstPage">
                                        <a href="#" @click="intoPage(1)">1</a>
                                    </li>
                                    <li class="disabled" v-if="showFirstDots"><a href="">...</a></li>
                                    <template v-for="index in showPageArray">
                                        <li v-if="index == page" class="active">
                                            <a href="#">{{ index }}</a>
                                        </li>
                                        <li v-else class="disabled">
                                            <a href="#" @click="intoPage(index)">{{ index }}</a>
                                        </li>
                                    </template>
                                    <li class="disabled" v-if="showLastDots"><a href="">...</a></li>
                                    <li v-if="page !== pageCount"><a href="#" @click="intoPage((page+1))">Next</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- END SAMPLE FORM PORTLET-->
        </div>
    </div>
</div>
##<script src="$!{configConstant.resourcesBasicUrl}/js/lib/bootstrap.js?v=${configConstant.srcVersion}"
##        type="text/javascript"></script>
<script src="$!{configConstant.resourcesBasicUrl}/js/lib/vue.min.js?v=${configConstant.srcVersion}"
        type="text/javascript"></script>
<script type="text/javascript">
    var vm = new Vue({
        el: '#vmList',
        data: {
            page: 1,
            pageSize: 20,
            count: 0,
            pageCount: 1,
            list: [],
            versionArray: [],
            moduleArray: [],
            version: "",
            module: "",
            apiNameLike: "",
            urlLike: "",
            authorNameLike: "",
            updateTimeStart: 0,
            updateTimeEnd: 0,
            old_version: "",
            old_module: "",
            old_apiNameLike: "",
            old_urlLike: "",
            old_authorNameLike: "",
            old_updateTimeStart: 0,
            old_updateTimeEnd: 0,
            moduleSort: '',
            versionSort: '',
            authorSort: '',
            updateTimeSort: ''
        },
        computed: {
            showFirstPage () {
                if (this.page > 3 && this.pageCount >= 10) {
                    return true
                } else {
                    return false
                }
            },
            // 是否显示第一组点
            showFirstDots () {
               if (this.page > 4 && this.pageCount >= 10) {
                return true
               } else {
                return false
               }
            },
            // 是否显示第二组点
            showLastDots () {
                if (this.page < (this.pageCount - 2) && this.pageCount >= 10) {
                    return true
                } else {
                    return false
                }
            },
            // 当前要显示的page页
            showPageArray () {
                var pC = this.pageCount
                if (pC >= 10) {
                    if (this.page <= 3) {
                        return this.makeArr(1, 5)
                    } else if (this.page > (pC - 2)) {
                        return this.makeArr(pC- 4, pC)
                    } else {
                        return this.makeArr(this.page - 2, this.page + 2)
                    }
                } else {
                    return this.makeArr(1, pC)
                }
            }
        },
        methods: {
            // 生成一个数组
            makeArr (start, end) {
                return [...Array(end + 1).keys()].filter(num => num >= start)
            },
            formatTime: function (time) {
                return new Date(parseInt(time) * 1000).toLocaleString().replace(/\//g, '-').replace('下午', ' ')
            },
            /**
             * 获取Api文档总数
             */
            loadCount: function () {
                $('#loading').modal('show');
                $.ajax({
                    url: "/api/doc/count.do",
                    type: "POST",
                    data: {},
                    cache: false,
                    success: function (result) {
                        result = JSON.parse(result)
                        if (result.code == 0) {
                            vm.count = result.ret.count
                            if (vm.count % vm.pageSize == 0) {
                                vm.pageCount = vm.count / vm.pageSize
                            } else {
                                vm.pageCount = vm.count / vm.pageSize + 1
                            }
                            if (vm.pageCount == 0) {
                                vm.pageCount = 1
                            }
                            vm.pageCount = Math.floor(vm.pageCount)
                            vm.loadApiList()
                            vm.loadVersionList()
                            vm.loadModuleList()
                        } else {
                            alert(result.msg)
                            $('#loading').modal('hide');
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('请求返回错误\nStatus：' + textStatus + '\nerrorThrown：' + errorThrown)
                        $('#loading').modal('hide');
                    }
                });
            },
            /**
             * 获取Api文档列表
             */
            loadApiList: function () {
                $('#loading').modal('show');
                var params = {
                    page: vm.page,
                    pageSize: vm.pageSize,
                    version: vm.old_version,
                    module: vm.old_module,
                    apiNameLike: vm.old_apiNameLike,
                    urlLike: vm.old_urlLike,
                    authorNameLike: vm.old_authorNameLike,
                    updateTimeStart: vm.old_updateTimeStart,
                    updateTimeEnd: vm.old_updateTimeEnd,
                    moduleSort: vm.moduleSort,
                    versionSort: vm.versionSort,
                    authorSort: vm.authorSort,
                    updateTimeSort: vm.updateTimeSort
                }
                $.ajax({
                    url: '/api/doc/list.do',
                    type: "POST",
                    data: params,
                    cache: false,
                    success: function (result) {
                        result = JSON.parse(result)
                        if (result.code == 0) {
                            vm.list = result.ret
                            $('#loading').modal('hide');
                        } else {
                            alert(result.msg)
                            $('#loading').modal('hide');
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('请求返回错误\nStatus：' + textStatus + '\nerrorThrown：' + errorThrown)
                        $('#loading').modal('hide');
                    }
                });
            },
            /**
             * 跳转到指定页并获取数据
             * @param index
             */
            intoPage: function (index) {
                if (index < 1 || index > vm.pageCount) {
                    // alert('翻页操作无效！')
                    return
                }
                vm.page = index
                vm.loadApiList()
            },
            /**
             * 跳转到详情页
             * @param id
             */
            intoDetail: function (id) {
                window.location = '/item.html?id=' + id
            },
            showDeleteDialog: function (id) {
                var mymessage = confirm('确认删除吗？');
                if (mymessage == true) {
                    vm.delete(id)
                } else if (mymessage == false) {
                    // Hide
                }
            },
            /**
             * 删除
             */
            delete: function (id) {
                $('#loading').modal('show');
                $.ajax({
                    url: '/api/doc/delete.do',
                    type: 'POST',
                    data: {
                        id: id
                    },
                    cache: false,
                    success: function (result) {
                        result = JSON.parse(result)
                        if (result.code == 0) {
                            alert('删除成功')
                            location.reload()
                        } else {
                            alert(result.msg)
                            $('#loading').modal('hide');
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('请求返回错误\nStatus：' + textStatus + '\nerrorThrown：' + errorThrown)
                        $('#loading').modal('hide');
                    }
                });
            },
            /**
             * 获取Api文档版本号列表
             */
            loadVersionList: function () {
                $.ajax({
                    url: "/api/doc/version.do",
                    type: "POST",
                    data: {},
                    cache: false,
                    success: function (result) {
                        result = JSON.parse(result)
                        if (result.code == 0) {
                            var versionList = result.ret;
                            if (versionList && versionList.length > 0) {
                                vm.versionArray = []
                                vm.versionArray.push({key: "", value: "全部"})
                                for (var i = 0; i < versionList.length; i++) {
                                    vm.versionArray.push({
                                        key: versionList[i],
                                        value: versionList[i]
                                    })
                                }
                            }
                        } else {
                            alert(result.msg)
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('请求返回错误\nStatus：' + textStatus + '\nerrorThrown：' + errorThrown)
                        $('#loading').modal('hide');
                    }
                });
            },
            /**
             * 获取模块列表
             */
            loadModuleList: function () {
                $.ajax({
                    url: "/api/doc/module.do",
                    type: "POST",
                    data: {},
                    cache: false,
                    success: function (result) {
                        result = JSON.parse(result)
                        if (result.code == 0) {
                            var moduleList = result.ret;
                            if (moduleList && moduleList.length > 0) {
                                vm.moduleArray = []
                                vm.moduleArray.push({key: "", value: "全部"})
                                for (var i = 0; i < moduleList.length; i++) {
                                    vm.moduleArray.push({
                                        key: moduleList[i],
                                        value: moduleList[i]
                                    })
                                }
                            }
                        } else {
                            alert(result.msg)
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('请求返回错误\nStatus：' + textStatus + '\nerrorThrown：' + errorThrown)
                        $('#loading').modal('hide');
                    }
                });
            },
            /**
             * 模糊搜索
             */
            fuzzySearch: function () {
                if (vm.version == "" && vm.module == "" && vm.apiNameLike == ""
                        && vm.urlLike == "" && vm.authorNameLike == "" && vm.updateTimeStart == 0 && vm.updateTimeEnd == 0) {
                    alert('请勿随便点击搜索按钮！')
                    return
                }
                if (vm.updateTimeStart > 0 && vm.updateTimeEnd > 0 && vm.updateTimeStart >= vm.updateTimeEnd) {
                    alert('请认真填写筛选的更新时间！')
                    return
                }
                if (vm.version == vm.old_version && vm.module == vm.old_module && vm.apiNameLike == vm.old_apiNameLike
                        && vm.urlLike == vm.old_urlLike && vm.authorNameLike == vm.old_authorNameLike
                        && vm.updateTimeStart == vm.old_updateTimeStart && vm.updateTimeEnd == vm.old_updateTimeEnd) {
                    alert('请修改后搜索内容后再进行搜索！')
                    return
                }
                $('#loading').modal('show');

                vm.old_version = vm.version
                vm.old_module = vm.module
                vm.old_apiNameLike = vm.apiNameLike
                vm.old_urlLike = vm.urlLike
                vm.old_authorNameLike = vm.authorNameLike
                vm.old_updateTimeStart = vm.updateTimeStart
                vm.old_updateTimeEnd = vm.updateTimeEnd

                vm.loadFuzzySearchCount()
                vm.intoPage(1)
            },
            /**
             * 获取Api文档总数
             */
            loadFuzzySearchCount: function () {
                $.ajax({
                    url: "/api/doc/search/count.do",
                    type: "POST",
                    data: {
                        version: vm.version,
                        module: vm.module,
                        apiNameLike: vm.apiNameLike,
                        urlLike: vm.urlLike,
                        authorNameLike: vm.authorNameLike,
                        updateTimeStart: vm.updateTimeStart,
                        updateTimeEnd: vm.updateTimeEnd,
                    },
                    cache: false,
                    success: function (result) {
                        result = JSON.parse(result)
                        if (result.code == 0) {
                            vm.count = result.ret.count
                            if (vm.count % vm.pageSize == 0) {
                                vm.pageCount = vm.count / vm.pageSize
                            } else {
                                vm.pageCount = vm.count / vm.pageSize + 1
                            }
                            if (vm.pageCount == 0) {
                                vm.pageCount = 1
                            }
                            vm.pageCount = Math.floor(vm.pageCount)
                        } else {
                            alert(result.msg)
                            $('#loading').modal('hide');
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert('请求返回错误\nStatus：' + textStatus + '\nerrorThrown：' + errorThrown)
                        $('#loading').modal('hide');
                    }
                });
            },
            /**
             *  模块排序
             */
            moduleSortClick: function () {
                vm.moduleSort = vm.changeSort(vm.moduleSort)
                vm.intoPage(1)
            },
            /**
             *  版本排序
             */
            versionSortClick: function () {
                vm.versionSort = vm.changeSort(vm.versionSort)
                vm.intoPage(1)
            },
            /**
             *  作者排序
             */
            authorSortClick: function () {
                vm.authorSort = vm.changeSort(vm.authorSort)
                vm.intoPage(1)
            },
            /**
             *  更新时间排序
             */
            updateTimeSortClick: function () {
                vm.updateTimeSort = vm.changeSort(vm.updateTimeSort)
                vm.intoPage(1)
            },
            /**
             * 返回排序字符
             *
             * @param sort
             * @return {*}
             */
            changeSort: function (sort) {
                switch (sort) {
                    case '':
                    default:
                        sort = 'ASC'
                        break
                    case 'ASC':
                        sort = 'DESC'
                        break
                    case 'DESC':
                        sort = ''
                        break
                }
                return sort
            },
            /**
             * 导出全部列表的Excel
             */
            exportExcel: function () {
                window.location.href = '/api/doc/export4Testing.do';
            },
            /**
             * 新建Api文档
             */
            addApiDoc: function () {
                window.location.href = '/item.html';
            }

        }
    });
</script>
<script type="text/javascript">
    vm.loadCount()
</script>